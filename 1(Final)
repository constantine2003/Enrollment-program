using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

public interface IEnrollmentActions
{
    bool CreateAccount();
    bool LogIn();
}

abstract class EnrollmentProgram
{
    public abstract bool DisplayMenu();
    public abstract void Start();
}

class StudentEnrollment : EnrollmentProgram, IEnrollmentActions
{
    private List<Student> students = new List<Student>();
    private List<Course> courses = new List<Course>();
    private string studentDataFile = "studentData.txt";
    private Admin admin = new Admin("admin", "admin123");

    public StudentEnrollment()
    {
        InitializeCoursesAndSubjects();
        LoadStudentData();
    }

    private bool InitializeCoursesAndSubjects()
    {
        try
        {
            courses.Add(new Course("BS in Computer Science", 50000, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Programming Fundamentals", "Mathematics I" } },
            { 2, new List<string> { "Data Structures", "Algorithms" } },
            { 3, new List<string> { "Databases", "Software Engineering" } },
            { 4, new List<string> { "Web Development", "Artificial Intelligence" } },
            { 5, new List<string> { "Computer Networks", "Operating Systems", "Cybersecurity" } }
        }));

            courses.Add(new Course("BS in Biology", 40000, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "General Biology", "Genetics" } },
            { 2, new List<string> { "Ecology", "Physiology" } },
            { 3, new List<string> { "Microbiology", "Botany" } },
            { 4, new List<string> { "Zoology", "Evolution" } },
            { 5, new List<string> { "Cell Biology", "Environmental Science" } }
        }));

            courses.Add(new Course("BS in Business Administration", 32040, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Introduction to Business", "Marketing Fundamentals" } },
            { 2, new List<string> { "Financial Accounting", "Business Ethics" } },
            { 3, new List<string> { "Management Principles", "Human Resources Management" } },
            { 4, new List<string> { "International Business", "Entrepreneurship" } },
            { 5, new List<string> { "Operations Management", "Strategic Planning" } }
        }));

            courses.Add(new Course("BS in Civil Engineering", 50000, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Engineering Mechanics", "Mathematics for Engineers" } },
            { 2, new List<string> { "Structural Mechanics", "Geotechnical Engineering" } },
            { 3, new List<string> { "Transportation Engineering", "Environmental Engineering" } },
            { 4, new List<string> { "Surveying", "Fluid Mechanics" } },
            { 5, new List<string> { "Materials Science", "Construction Management" } }
        }));

            courses.Add(new Course("BS in Computer Engineering", 38000, new Dictionary<int, List<string>>
        {
            { 1, new List<string>
                {
                    "First Semester:\n",
                    "Chemistry for Engineers (Lab)\n",
                    "Chemistry for Engineers (Lec)\n",
                    "Computer Engineering as a Discipline\n",
                    "Engineering Calculus 1\n",
                    "Mathematics in the Modern World\n",
                    "Movement Enhancement / PATHFit 1-Movement Competency Training\n",
                    "National Service Training Program\n",
                    "Programming Logic and Design 1\n",
                    "Science, Technology and Society\n\n",
                    "Second Semester:\n",
                    "Understanding the Self\n",
                    "Discrete Mathematics\n",
                    "Engineering Calculus 2\n",
                    "Fitness Exercises / PATHFit 2\n",
                    "National Service Training Program 2\n",
                    "Physics for Engineers, lab\n",
                    "Physics for Engineers, lec\n",
                    "Programming Logic and Design 2\n",
                    "Purposive Communication 3\n",
                    "The Contemporary World\n"
                }
            },
            { 2, new List<string>
                {
                    "First Semester:\n",
                    "Art Appreciation\n",
                    "Differential Equations\n",
                    "Engineering Data Analysis\n",
                    "Ethics\n",
                    "Fundamentals of Electrical Circuits, lab\n",
                    "Fundamentals of Electrical Circuits, lec\n",
                    "General Education Elective 1\n",
                    "Object Oriented Programming 1 for CPE\n",
                    "PATHFIT 1/PATHFit 3-Menu of Sports, Dance, Recreation and Martial Arts, Group Exercise, Outdoor and Adventure Activities\n\n",
                    "Second Semester:\n",
                    "Advanced Engineering Mathematics for CPE\n",
                    "Computer Aided Design and Drafting\n",
                    "Data Structures and Algorithm for CPE\n",
                    "Fundamentals of Electronic Circuits, lec\n",
                    "Fundamentals of Electronic Circuits/Basic Electronics, lab\n",
                    "General Education Elective 2\n",
                    "Numerical Methods\n",
                    "Object Oriented Programming 2 for CPE\n",
                    "PATHFIT 2 / PATHFit 4-Menu of Sports, Dance, Recreation and Martial Arts, Group Exercise, Outdoor and Adventure Activities\n"
                }
            },
            { 3, new List<string>
                {
                    "First Semester:\n",
                    "Basic Occupational Safety and Health\n",
                    "Computer Engineering Drafting and Design\n",
                    "Data and Digital Communications\n",
                    "Feedback and Control Systems\n",
                    "Logic Circuits and Design\n",
                    "Software Design\n",
                    "Technopreneurship\n",
                    "Track Course 1\n\n",
                    "Second Semester:\n",
                    "Computer Networks and Security\n",
                    "CPE Laws and Professional Practice\n",
                    "Fundamentals of Mixed Signals and Sensors\n",
                    "General Education Elective 3\n",
                    "Introduction to HDL\n",
                    "Methods of Research\n",
                    "Microprocessors\n",
                    "Track Course 2\n"
                }
            },
            { 4, new List<string>
                {
                    "First Semester:\n",
                    "Computer Architecture and Organization\n",
                    "CPE Comprehensive Evaluation Course 1\n",
                    "CPE Practice and Design 1\n",
                    "Digital Signal Processing\n",
                    "Embedded Systems\n",
                    "Engineering Economics\n",
                    "Track Course 3\n\n",
                    "Second Semester:\n",
                    "CPE Practice and Design 2\n",
                    "Emerging Technologies in CPE\n",
                    "Engineering Management\n",
                    "Readings in Philippine History\n",
                    "Seminars and Field Trips\n",
                    "The Life and Works of Rizal"
                }
            },
        }));

            courses.Add(new Course("BS in Information Technology (IT)", 37100, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Introduction to IT", "Computer Networking" } },
            { 2, new List<string> { "Database Management", "Systems Analysis" } },
            { 3, new List<string> { "Web Development", "Mobile App Development" } },
            { 4, new List<string> { "Cloud Computing", "IT Project Management" } },
            { 5, new List<string> { "IT Ethics", "Data Analytics" } }
        }));

            courses.Add(new Course("BS in Nursing", 62300, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Anatomy", "Pharmacology" } },
            { 2, new List<string> { "Patient Care", "Nursing Ethics" } },
            { 3, new List<string> { "Medical-Surgical Nursing", "Pediatrics" } },
            { 4, new List<string> { "Obstetrics", "Mental Health Nursing" } },
            { 5, new List<string> { "Community Health Nursing", "Nursing Research" } }
        }));

            courses.Add(new Course("BS in Mathematics", 21900, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Calculus I", "Linear Algebra" } },
            { 2, new List<string> { "Calculus II", "Number Theory" } },
            { 3, new List<string> { "Differential Equations", "Abstract Algebra" } },
            { 4, new List<string> { "Real Analysis", "Complex Analysis" } },
            { 5, new List<string> { "Statistics", "Discrete Mathematics" } }
        }));

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error initializing courses and subjects: " + ex.Message);
            return false;
        }
    }

    public override bool DisplayMenu()
    {
        try
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("╔════════════════════════════════╗");
            Console.WriteLine("║                                ║");
            Console.WriteLine("║  WELCOME TO OUR SCHOOL PORTAL! ║");
            Console.WriteLine("║                                ║");
            Console.WriteLine("╠════════════════════════════════╣");
            Console.WriteLine("║                                ║");
            Console.WriteLine("║  [1] Create Account            ║");
            Console.WriteLine("║                                ║");
            Console.WriteLine("║  [2] Log In                    ║");
            Console.WriteLine("║                                ║");
            Console.WriteLine("║  [3] Enter Admin               ║");
            Console.WriteLine("║                                ║");
            Console.WriteLine("║  [4] Exit                      ║");
            Console.WriteLine("║                                ║");
            Console.WriteLine("╚════════════════════════════════╝");

            Console.Write("\nEnter an option (1-4): ");
            Console.ResetColor();
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error displaying menu: " + ex.Message);
            return false;
        }
    }



    public override void Start()
    {
        bool isRunning = true;
        while (isRunning)
        {
            try
            {
                if (!DisplayMenu())
                {
                    Console.WriteLine("DisplayMenu failed. Exiting program.");
                    return;
                }

                int choice;
                if (!int.TryParse(Console.ReadLine(), out choice))
                {
                    Console.WriteLine("Invalid choice. Please try again.");
                    continue;
                }

                switch (choice)
                {
                    case 1:
                        if (CreateAccount())
                        {
                            Console.WriteLine("Account created successfully!\n");
                            SaveStudentData();
                        }
                        else
                        {
                            Console.WriteLine("Account creation failed. Please try again.\n");
                        }
                        break;
                    case 2:
                        if (LogIn())
                        {
                            Console.WriteLine("Login successful!\n");
                        }
                        else
                        {
                            Console.WriteLine("Login failed. Please try again.\n");
                        }
                        break;
                    case 3:
                        if (AdminLogin())
                        {
                            AdminMenu();
                        }
                        break;
                    case 4:
                        isRunning = false;
                        Console.WriteLine("Exiting program.");
                        SaveStudentData();
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("An error occurred: " + ex.Message);
            }
        }
    }

    private bool AdminLogin()
    {
        try
        {
            Console.Write("Enter admin username: ");
            string username = Console.ReadLine();
            Console.Write("Enter admin password: ");
            string password = Console.ReadLine();

            if (admin.ValidateCredentials(username, password))
            {
                Console.WriteLine("Admin login successful!\n");
                return true;
            }
            else
            {
                Console.WriteLine("Admin login failed. Incorrect username or password.\n");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error during admin login: " + ex.Message);
            return false;
        }
    }

    private void AdminMenu()
    {
        bool isAdminMenuRunning = true;
        while (isAdminMenuRunning)
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Yellow;

            Console.WriteLine("╔════════════════════════════════╗");
            Console.WriteLine("║          Admin Menu:           ║");
            Console.WriteLine("║   1. View Enrolled Students    ║");
            Console.WriteLine("║   2. Remove Student            ║");
            Console.WriteLine("║   3. Search Students by Course ║");
            Console.WriteLine("║   4. Back to Main Menu         ║");
            Console.WriteLine("╚════════════════════════════════╝");
            Console.ResetColor();

            Console.Write("Enter an option (1-3): ");
            if (int.TryParse(Console.ReadLine(), out int adminChoice))
            {
                switch (adminChoice)
                {
                    case 1:
                        ViewEnrolledStudents();
                        break;
                    case 2:
                        RemoveEnrolledStudent();
                        break;
                    case 3:
                        Console.Write("Enter the course name to search for students: ");
                        string courseToSearch = Console.ReadLine();
                        admin.SearchStudentsByCourse(students, courseToSearch);                    
                        break;
                    case 4:
                        isAdminMenuRunning = false;
                        Console.ReadLine();
                        Console.Clear();
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid choice. Please enter a number.");
            }
        }
    }
   
    public void ViewEnrolledStudents()
    {
        admin.ViewEnrolledStudents(students);
    }

    public void RemoveEnrolledStudent()
    {
        try
        {
            Console.Write("Enter the Student ID to remove: ");
            string studentID = Console.ReadLine();

            admin.RemoveEnrolledStudent(students, studentID);
            SaveStudentData();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error removing student: " + ex.Message);
        }
    }

    class Admin : User
    {
        private string password;

        public Admin(string name, string password)
        {
            Name = name;
            this.password = password;
        }
        public void SearchStudentsByCourse(List<Student> students, string courseName)
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Cyan;

            Console.WriteLine($"Students Enrolled in {courseName}");
            Console.WriteLine("═══════════════════════════════════════════════════════════════════════════════════════════════════");

            bool foundStudents = false;

            foreach (var student in students)
            {
                if (student.Course.Name.Equals(courseName, StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine($" Student ID: {student.StudentID}, Name: {student.Name}, Course: {student.Course.Name}");
                    foundStudents = true;
                }
            }

            if (!foundStudents)
            {
                Console.WriteLine($"No students found in the course: {courseName}");
            }

            Console.ResetColor();
            Console.ReadKey();
            Console.Clear();
        }

        public bool ValidateCredentials(string username, string password)
        {
            return Name == username && this.password == password;
        }
        public void RemoveEnrolledStudent(List<Student> students, string studentID)
        {
            // Implement the logic to remove the student with the given ID from the list
            var studentToRemove = students.FirstOrDefault(s => s.StudentID == studentID);
            if (studentToRemove != null)
            {
                students.Remove(studentToRemove);
                Console.WriteLine("Student removed successfully.");
            }
            else
            {
                Console.WriteLine("Student not found.");
            }
        }

        public void ViewEnrolledStudents(List<Student> students)
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Cyan;

            Console.WriteLine("Enrolled Students");
            Console.WriteLine("═══════════════════════════════════════════════════════════════════════════════════════════════════");
            foreach (var student in students)
            {
                Console.WriteLine($" Student ID: {student.StudentID}, Name: {student.Name}, Course: {student.Course.Name}");
            }
            Console.ResetColor();
            Console.ReadKey();
            Console.Clear();
        }

        public override string GetRole()
        {
            return "Admin";
        }
    }

    public bool CreateAccount()
    {
        try
        {
            Console.Clear();
            Console.Write("Enter your name: ");
            string name = Console.ReadLine();
            string studentID = GenerateRandomStudentID();

            Console.Write("Enter your birthday (MM/DD/YYYY): ");
            DateTime birthday;
            if (!DateTime.TryParse(Console.ReadLine(), out birthday))
            {
                Console.WriteLine("Invalid birthday format. Please enter your birthday in MM/DD/YYYY format.");
                return false;
            }

            Console.Write("Enter your current address: ");
            string address = Console.ReadLine();

            Console.Write("Enter your citizenship: ");
            string citizenship = Console.ReadLine();

            Console.Write("Enter your gender: ");
            string gender = Console.ReadLine();

            Console.Write("Enter a password: ");
            string password = Console.ReadLine();

            Console.WriteLine("\nAvailable Courses:");
            for (int i = 0; i < courses.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {courses[i].Name} - Cost per semester: PHP{courses[i].CostPerSemester}");
            }

            Console.Write("Select a course (Enter the course number): ");
            int courseChoice = int.Parse(Console.ReadLine()) - 1;

            if (courseChoice >= 0 && courseChoice < courses.Count)
            {
                Student student = new Student(name, studentID, password, birthday, courses[courseChoice], address, citizenship, gender);
                students.Add(student);
                Console.Clear();
                Console.WriteLine("Your Student ID is: " + studentID);
                SaveStudentData();
                return true;
            }
            else
            {
                Console.WriteLine("Invalid course choice. Please create an account again.");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error creating account: " + ex.Message);
            return false;
        }
    }

    public bool LogIn()
    {
        try
        {
            Console.Write("Enter your student ID: ");
            string studentID = Console.ReadLine();
            Student student = students.Find(s => s.StudentID == studentID);
            if (student != null)
            {
                Console.Write("Enter your password: ");
                string password = Console.ReadLine();

                if (password == student.Password)
                {
                    Console.Clear();
                    Console.WriteLine($"Welcome, {student.Name}!!!!");

                    bool loggedInMenu = true;
                    while (loggedInMenu)
                    {
                        Console.ForegroundColor = ConsoleColor.DarkYellow;
                        Console.WriteLine("╔════════════════════════════╗");
                        Console.WriteLine("║   Logged In Menu:          ║");
                        Console.WriteLine("║--------------------------  ║");
                        Console.WriteLine("║ [1] Check Curriculum       ║");
                        Console.WriteLine("║ [2] Change Password        ║");
                        Console.WriteLine("║ [3] Choose Payment         ║");
                        Console.WriteLine("║     Method                 ║");
                        Console.WriteLine("║ [4] Profile                ║");
                        Console.WriteLine("║ [5] Enroll Subject         ║");
                        Console.WriteLine("║ [6] Check Subjects         ║");
                        Console.WriteLine("║ [7] Logout                 ║");
                        Console.WriteLine("╚════════════════════════════╝");

                        Console.Write("Enter an option (1-7): ");
                        Console.ResetColor();

                        int loggedInChoice;
                        if (int.TryParse(Console.ReadLine(), out loggedInChoice))
                        {
                            switch (loggedInChoice)
                            {
                                case 1:
                                    Console.Clear();
                                    Console.WriteLine("Checking Subjects:");
                                    Console.WriteLine($"Subjects for {student.Course.Name}:");
                                    foreach (var entry in student.Course.Subjects)
                                    {
                                        Console.WriteLine($"Year {entry.Key}: {string.Join(", ", entry.Value)}");
                                        Console.ReadKey();
                                    }
                                    Console.ReadKey();
                                    Console.Clear();
                                    break;
                                case 2:
                                    Console.Write("Enter your old password: ");
                                    string oldPassword = Console.ReadLine();
                                    Console.Write("Enter your new password: ");
                                    string newPassword = Console.ReadLine();
                                    student.ChangePassword(oldPassword, newPassword);
                                    SaveStudentData();
                                    Console.ReadKey();
                                    break;
                                case 3:
                                    ChoosePaymentMethod(student);
                                    Console.ReadKey();
                                    Console.Clear();
                                    break;
                                case 4:
                                    ViewProfile(student);
                                    break;
                                case 5:
                                    Console.Clear();
                                    Console.WriteLine("╔════════════════════════════╗");
                                    Console.WriteLine("║   Choose Year to Enroll:   ║");
                                    Console.WriteLine("║--------------------------  ║");
                                    Console.WriteLine("║ [1] First Year             ║");
                                    Console.WriteLine("║ [2] Second Year            ║");
                                    Console.WriteLine("║ [3] Third Year             ║");
                                    Console.WriteLine("║ [4] Fourth Year            ║");
                                    Console.WriteLine("╚════════════════════════════╝");
                                    Console.Write("Choose an option [1-4]: ");

                                    if (int.TryParse(Console.ReadLine(), out int enrollChoice))
                                    {
                                        switch (enrollChoice)
                                        {
                                            case 1:
                                                Console.Clear();
                                                Console.WriteLine("╔══════════════════════════════════════════════╗");
                                                Console.WriteLine("║   Choose Semester to Enroll for  First Year: ║");
                                                Console.WriteLine("║   1. First Semester   2. Second Semester     ║");
                                                Console.WriteLine("╚══════════════════════════════════════════════╝");
                                                Console.Write("Enter your choice [1-2]: ");

                                                if (int.TryParse(Console.ReadLine(), out int semesterChoice))
                                                {
                                                    switch (semesterChoice)
                                                    {
                                                        case 1:
                                                            Console.WriteLine("Successfully enrolled in the first semester of the first year.");
                                                            Console.WriteLine("Your Subjects for this Semester:");
                                                            Console.WriteLine("1. Chemistry for Engineers (Lab)");
                                                            Console.WriteLine("2. Chemistry for Engineers (Lec)");
                                                            Console.WriteLine("3. Computer Engineering as a Discipline");
                                                            Console.WriteLine("4. Engineering Calculus 1");
                                                            Console.WriteLine("5. Mathematics in the Modern World");
                                                            Console.WriteLine("6. Movement Enhancement / PATHFit 1");
                                                            Console.WriteLine("7. National Service Training Program 1");
                                                            Console.WriteLine("8. Programming Logic and Design 1");
                                                            Console.WriteLine("9. Science, Technology and Society");
                                                            Console.WriteLine("10. Understanding the Self");
                                                            Console.ReadKey();
                                                            Console.Clear();
                                                            break;
                                                        case 2:
                                                            Console.WriteLine("Successfully enrolled in the second semester of the first year.");
                                                            Console.WriteLine("Your Subjects for this semester:");
                                                            Console.WriteLine("1. Discrete Mathematics");
                                                            Console.WriteLine("2. Engineering Calculus 2");
                                                            Console.WriteLine("3. Fitness Exercises / PATHFit 2-Exercise-based Fitness Activities");
                                                            Console.WriteLine("4. National Service Training Program 2");
                                                            Console.WriteLine("5. Physics for Engineers, lab");
                                                            Console.WriteLine("6. Physics for Engineers, lec");
                                                            Console.WriteLine("7. Programming Logic and Design 2");
                                                            Console.WriteLine("8. Purposive Communication");
                                                            Console.WriteLine("9. The Contemporary World");
                                                            Console.ReadKey();
                                                            Console.Clear();
                                                            break;
                                                        default:
                                                            Console.WriteLine("Invalid semester choice.");
                                                            break;
                                                    }
                                                }
                                                else
                                                {
                                                    Console.WriteLine("Invalid input for semester choice.");
                                                }
                                                break;
                                            case 2:
                                                Console.Clear();
                                                Console.WriteLine("╔══════════════════════════════════════════════╗");
                                                Console.WriteLine("║   Choose Semester to Enroll for Second Year: ║");
                                                Console.WriteLine("║   1. First Semester   2. Second Semester     ║");
                                                Console.WriteLine("╚══════════════════════════════════════════════╝");
                                                Console.Write("Enter your choice (1-2): ");

                                                if (int.TryParse(Console.ReadLine(), out int semesterChoiceSecondYear))
                                                {
                                                    switch (semesterChoiceSecondYear)
                                                    {
                                                        case 1:
                                                            Console.WriteLine("Successfully enrolled in the first semester of the second year.");
                                                            Console.WriteLine("1. Differential Equations");
                                                            Console.WriteLine("2. Engineering Data Analysis");
                                                            Console.WriteLine("3. Ethics");
                                                            Console.WriteLine("4. Fundamentals of Electrical Circuits, lab");
                                                            Console.WriteLine("5. Fundamentals of Electrical Circuits, lec");
                                                            Console.WriteLine("6. General Education Elective 1");
                                                            Console.WriteLine("7. Object-Oriented Programming 1 for CPE");
                                                            Console.WriteLine("8. PATHFIT 1 / PATHFit 3-Menu of Sports, Dance, Recreation, and Martial Arts, Group Exercise, Outdoor and Adventure Activities");
                                                            Console.ReadKey();
                                                            Console.Clear();
                                                            break;
                                                        case 2:
                                                            Console.WriteLine("Successfully enrolled in the second semester of the second year.");
                                                            Console.WriteLine("1. Advanced Engineering Mathematics for CPE");
                                                            Console.WriteLine("2. Computer Aided Design and Drafting");
                                                            Console.WriteLine("3. Data Structures and Algorithm for CPE");
                                                            Console.WriteLine("4. Fundamentals of Electronic Circuits, lec");
                                                            Console.WriteLine("5. Fundamentals of Electronic Circuits/Basic Electronics, lab");
                                                            Console.WriteLine("6. General Education Elective 2");
                                                            Console.WriteLine("7. Numerical Methods");
                                                            Console.WriteLine("8. Object Oriented Programming 2 for CPE");
                                                            Console.WriteLine("9. PATHFIT 2 / PATHFit 4-Menu of Sports, Dance, Recreation, and Martial Arts, Group Exercise, Outdoor and Adventure Activities");
                                                            Console.ReadKey();
                                                            Console.Clear();
                                                            break;
                                                        default:
                                                            Console.WriteLine("Invalid semester choice.");
                                                            break;
                                                    }
                                                }
                                                else
                                                {
                                                    Console.WriteLine("Invalid input for semester choice.");
                                                }
                                                break;

                                            case 3:
                                                Console.Clear();
                                                Console.WriteLine("Choose Semester to Enroll for Third Year:");
                                                Console.WriteLine("1. First Semester  2. Second Semester");
                                                Console.Write("Enter your choice (1-2): ");

                                                if (int.TryParse(Console.ReadLine(), out int semesterChoiceThirdYear))
                                                {
                                                    switch (semesterChoiceThirdYear)
                                                    {
                                                        case 1:
                                                            Console.WriteLine("Successfully enrolled in the first semester of the third year.");
                                                            Console.ReadKey();
                                                            break;
                                                        case 2:
                                                            Console.WriteLine("Successfully enrolled in the second semester of the third year.");
                                                            Console.ReadKey();
                                                            break;
                                                        default:
                                                            Console.WriteLine("Invalid semester choice.");
                                                            break;
                                                    }
                                                }
                                                else
                                                {
                                                    Console.WriteLine("Invalid input for semester choice.");
                                                }
                                                break;
                                            case 4:
                                                Console.Clear();
                                                Console.WriteLine("Choose Semester to Enroll for Fourth Year:");
                                                Console.WriteLine("1. First Semester  2. Second Semester");
                                                Console.Write("Enter your choice (1-2): ");

                                                if (int.TryParse(Console.ReadLine(), out int semesterChoiceFourthYear))
                                                {
                                                    switch (semesterChoiceFourthYear)
                                                    {
                                                        case 1:
                                                            Console.WriteLine("Successfully enrolled in the first semester of the fourth year.");
                                                            Console.ReadKey();
                                                            break;
                                                        case 2:
                                                            Console.WriteLine("Successfully enrolled in the second semester of the fourth year.");
                                                            Console.ReadKey();
                                                            break;
                                                        default:
                                                            Console.WriteLine("Invalid semester choice.");
                                                            break;
                                                    }
                                                }
                                                else
                                                {
                                                    Console.WriteLine("Invalid input for semester choice.");
                                                }
                                                break;

                                            default:
                                                Console.WriteLine("Invalid year choice.");
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        Console.WriteLine("Invalid input for year choice.");
                                    }
                                    break;
                                case 6:
                                    Console.Clear();
                                    Console.ForegroundColor = ConsoleColor.Green;
                                    Console.WriteLine("╔═══════════════════════════════════════════════════════════════╗");
                                    Console.WriteLine("║                 Subjects Enrolled                             ║");
                                    Console.WriteLine("╠═══════════════════════════════════════════════════════════════╣");
                                    Console.WriteLine("║ 1. Advanced Engineering Mathematics for CPE                   ║");
                                    Console.WriteLine("║ 2. Computer Aided Design and Drafting                         ║");
                                    Console.WriteLine("║ 3. Data Structures and Algorithm for CPE                      ║");
                                    Console.WriteLine("║ 4. Fundamentals of Electronic Circuits, lec                   ║");
                                    Console.WriteLine("║ 5. Fundamentals of Electronic Circuits/Basic Electronics, lab ║");
                                    Console.WriteLine("║ 6. General Education Elective 2                               ║");
                                    Console.WriteLine("║ 7. Numerical Methods                                          ║");
                                    Console.WriteLine("║ 8. Object Oriented Programming 2 for CPE                      ║");
                                    Console.WriteLine("║ 9. PATHFIT 2 / PATHFit 4                                      ║");
                                    Console.WriteLine("╚═══════════════════════════════════════════════════════════════╝");
                                    Console.ResetColor();
                                    Console.ReadKey();
                                    Console.Clear();
                                    break;
                                case 7:
                                    loggedInMenu = false;
                                    Console.WriteLine("Logging out.");
                                    Console.Clear();
                                    break;
                                default:
                                    Console.WriteLine("Invalid choice. Please try again.");
                                    Console.Clear();
                                    break;
                            }
                        }
                        else
                        {
                            Console.WriteLine("Invalid choice. Please try again.");
                        }
                    }

                    return true;
                }
                else
                {
                    Console.WriteLine("Incorrect password. Please try again.");
                    return false;
                }
            }
            else
            {
                Console.WriteLine("Student not found. Please create an account or try again.");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error logging in: " + ex.Message);
            return false;
        }
    }


    private void ChoosePaymentMethod(Student student)
    {
        try
        {
            Console.Clear();
            Console.WriteLine("\n╔════════════════════════════════════════╗");
            Console.WriteLine("║        Choose Payment Method:          ║");
            Console.WriteLine("║  1. Online Payment                     ║");
            Console.WriteLine("║  2. Pay Through the Cashier            ║");
            Console.WriteLine("╚════════════════════════════════════════╝");
            Console.Write("Enter your choice (1-2): ");
            int paymentChoice;
            if (int.TryParse(Console.ReadLine(), out paymentChoice))
            {
                switch (paymentChoice)
                {
                    case 1:
                        Console.WriteLine($"Online Payment selected. Receipt:\n{GenerateOnlinePaymentReceipt(student)}");
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 2:
                        Console.WriteLine($"Pay Through the Cashier selected. Receipt:\n{GenerateCashierPaymentReceipt(student)}");
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid choice. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error choosing payment method: " + ex.Message);
        }
    }

    private string GenerateOnlinePaymentReceipt(Student student)
    {
        Console.Clear();
        Console.WriteLine("[1] GCASH");
        Console.WriteLine("[2] DragonPay");
        Console.Write("Choose an option where to pay: ");

        string paymentOption = Console.ReadLine();

        switch (paymentOption)
        {
            case "1":
                Console.WriteLine("Processing GCASH payment...");

                Console.WriteLine("Choose an option for GCASH payment:");
                Console.WriteLine("1. Bills");
                Console.WriteLine("2. Load");
                Console.WriteLine("3. Transfer");

                Console.Write("Enter your choice: ");
                string gcashOption = Console.ReadLine();

                switch (gcashOption)
                {
                    case "1":
                        Console.WriteLine("Choose a category for bills payment:");
                        Console.WriteLine("1. School Tuition");
                        Console.WriteLine("2. Water Utilities");
                        Console.WriteLine("3. Cable");

                        Console.Write("Enter your choice: ");
                        string billCategory = Console.ReadLine();

                        switch (billCategory)
                        {
                            case "1":
                                Console.WriteLine($"You selected School Tuition.");
                                // Get the amount to pay for school tuition
                                Console.Write("Enter the amount to pay: PHP ");
                                double tuitionAmount;
                                while (!double.TryParse(Console.ReadLine(), out tuitionAmount) || tuitionAmount <= 0)
                                {
                                    Console.Write("Invalid amount. Please enter a valid amount: PHP ");
                                }
                                Console.Clear();
                                Console.WriteLine($"Processing School Tuition payment of PHP {tuitionAmount}. Payment done!");
                                break;

                            case "2":
                                Console.WriteLine("Processing Water Utilities payment...");
                                // Add Water Utilities payment logic here
                                break;

                            case "3":
                                Console.WriteLine("Processing Cable payment...");
                                // Add Cable payment logic here
                                break;

                            default:
                                Console.WriteLine("Invalid category. Payment processing failed.");
                                break;
                        }
                        break;

                    case "2":
                        Console.WriteLine("Processing Load payment...");
                        // Add Load payment logic here
                        break;

                    case "3":
                        Console.WriteLine("Processing Transfer payment...");
                        // Add Transfer payment logic here
                        break;

                    default:
                        Console.WriteLine("Invalid option for GCASH payment. Payment processing failed.");
                        break;
                }
                break;

            case "2":
                Console.WriteLine("Processing DragonPay payment...");
                // Add DragonPay-specific logic here
                break;

            default:
                return "Invalid option. Payment processing failed.";
        }

        return $"Receipt for Online Payment\n" +
               $"Student: {student.Name}\n" +
               $"Course: {student.Course.Name}\n" +
               $"Amount: PHP {student.Course.CostPerSemester}\n" +
               $"Date: {DateTime.Now}\n" +
               $"Payment Option: {(paymentOption == "1" ? "GCASH" : "DragonPay")}";
    }

    private string GenerateCashierPaymentReceipt(Student student)
    {
        return $"Receipt for Payment Through Cashier\nStudent: {student.Name}\nCourse: {student.Course.Name}\nAmount: PHP {student.Course.CostPerSemester}\nDate: {DateTime.Now}";
    }

    private string GenerateRandomStudentID()
    {
        try
        {
            Random rand = new Random();
            int randomNumber = rand.Next(1000, 9999);
            return $"22-{randomNumber:0000}-10";
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error generating student ID: " + ex.Message);
            return null;
        }
    }

    private void SaveStudentData()
    {
        try
        {
            string jsonData = JsonSerializer.Serialize(students);
            File.WriteAllText(studentDataFile, jsonData);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving student data: " + ex.Message);
        }
    }

    private void LoadStudentData()
    {
        try
        {
            if (File.Exists(studentDataFile))
            {
                string jsonData = File.ReadAllText(studentDataFile);
                students = JsonSerializer.Deserialize<List<Student>>(jsonData);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading student data: " + ex.Message);
        }
    }
    private void ViewProfile(Student student)
    {
        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Green;

        Console.WriteLine("╔═════════════════════════════════════════════════════════════════════════╗");
        Console.WriteLine("║             Student Profile                                             ║");
        Console.WriteLine("╠═════════════════════════════════════════════════════════════════════════╣");
        Console.WriteLine($" Name: {student.Name}                        ");
        Console.WriteLine($" Student ID: {student.StudentID}             ");
        Console.WriteLine($" Birthday: {student.Birthday}                ");
        Console.WriteLine($" Address: {student.Address}                  ");
        Console.WriteLine($" Citizenship: {student.Citizenship}          ");
        Console.WriteLine($" Gender: {student.Gender}                    ");
        Console.WriteLine("═══════════════════════════════════════════════════════════════════════════");
        Console.ResetColor();
        Console.ReadKey();
        Console.Clear();
    }
}

abstract class User
{
    public string Name { get; set; }
    public abstract string GetRole();
}

class Student : User
{
    public string StudentID { get; set; }
    public string Password { get; set; }
    public DateTime Birthday { get; set; }
    public Course Course { get; set; }

    public string Address { get; set; }
    public string Citizenship { get; set; }
    public string Gender { get; set; }

    public Dictionary<string, List<string>> EnrolledSubjects { get; set; } = new Dictionary<string, List<string>>();
    public Student(string name, string studentID, string password, DateTime birthday, Course course, string address, string citizenship, string gender)
    {
        Name = name;
        StudentID = studentID;
        Password = password;
        Birthday = birthday;
        Course = course;
        Address = address;
        Citizenship = citizenship;
        Gender = gender;
    }

    public override string GetRole()
    {
        return "Student";
    }

    public void ChangePassword(string oldPassword, string newPassword)
    {
        if (Password == oldPassword)
        {
            Password = newPassword;
            Console.Clear();
            Console.WriteLine("Password changed successfully!");
        }
        else
        {
            Console.WriteLine("Incorrect old password. Password not changed.");
        }
    }
}

class Course
{
    public string Name { get; set; }
    public decimal CostPerSemester { get; set; }
    public Dictionary<int, List<string>> Subjects { get; set; }

    public Course(string name, decimal costPerSemester, Dictionary<int, List<string>> subjects)
    {
        Name = name;
        CostPerSemester = costPerSemester;
        Subjects = subjects;
    }
}

class Program
{
    static void Main(string[] args)
    {
        EnrollmentProgram enrollmentProgram = new StudentEnrollment();
        enrollmentProgram.Start();
    }
}
