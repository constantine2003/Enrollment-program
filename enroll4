using System;
using System.Collections.Generic;

abstract class EnrollmentProgram
{
    public abstract void DisplayMenu();
    public abstract void Start();
}

class StudentEnrollment : EnrollmentProgram
{
    private List<Student> students = new List<Student>();
    private List<Course> courses = new List<Course>();

    public StudentEnrollment()
    {
        InitializeCoursesAndSubjects();
    }

    private void InitializeCoursesAndSubjects()
    {
        courses.Add(new Course("BS in Computer Science", 50000, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Programming Fundamentals", "Mathematics I" } },
            { 2, new List<string> { "Data Structures", "Algorithms" } },
            { 3, new List<string> { "Databases", "Software Engineering" } },
            { 4, new List<string> { "Web Development", "Artificial Intelligence" } },
            { 5, new List<string> { "Computer Networks", "Operating Systems", "Cybersecurity" } }
        }));

        courses.Add(new Course("BS in Biology", 40000, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "General Biology", "Genetics" } },
            { 2, new List<string> { "Ecology", "Physiology" } },
            { 3, new List<string> { "Microbiology", "Botany" } },
            { 4, new List<string> { "Zoology", "Evolution" } },
            { 5, new List<string> { "Cell Biology", "Environmental Science" } }
        }));

        courses.Add(new Course("BS in Business Administration", 32040, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Introduction to Business", "Marketing Fundamentals" } },
            { 2, new List<string> { "Financial Accounting", "Business Ethics" } },
            { 3, new List<string> { "Management Principles", "Human Resources Management" } },
            { 4, new List<string> { "International Business", "Entrepreneurship" } },
            { 5, new List<string> { "Operations Management", "Strategic Planning" } }
        }));

        courses.Add(new Course("BS in Civil Engineering", 50000, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Engineering Mechanics", "Mathematics for Engineers" } },
            { 2, new List<string> { "Structural Mechanics", "Geotechnical Engineering" } },
            { 3, new List<string> { "Transportation Engineering", "Environmental Engineering" } },
            { 4, new List<string> { "Surveying", "Fluid Mechanics" } },
            { 5, new List<string> { "Materials Science", "Construction Management" } }
        }));

        courses.Add(new Course("BS in Computer Engineering", 38000, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Digital Systems", "Computer Architecture" } },
            { 2, new List<string> { "Microcontrollers", "Embedded Systems" } },
            { 3, new List<string> { "VLSI Design", "Digital Signal Processing" } },
            { 4, new List<string> { "Robotics", "Real-Time Systems" } },
            { 5, new List<string> { "Network Protocols", "FPGA Design" } }
        }));
        
        courses.Add(new Course("BS in Information Technology (IT)", 37100, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Introduction to IT", "Computer Networking" } },
            { 2, new List<string> { "Database Management", "Systems Analysis" } },
            { 3, new List<string> { "Web Development", "Mobile App Development" } },
            { 4, new List<string> { "Cloud Computing", "IT Project Management" } },
            { 5, new List<string> { "IT Ethics", "Data Analytics" } }
        }));
        
         courses.Add(new Course("BS in Nursing", 62300, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Anatomy", "Pharmacology" } },
            { 2, new List<string> { "Patient Care", "Nursing Ethics" } },
            { 3, new List<string> { "Medical-Surgical Nursing", "Pediatrics" } },
            { 4, new List<string> { "Obstetrics", "Mental Health Nursing" } },
            { 5, new List<string> { "Community Health Nursing", "Nursing Research" } }
        })); 
        
        courses.Add(new Course("BS in Mathematics", 21900, new Dictionary<int, List<string>>
        {
            { 1, new List<string> { "Calculus I", "Linear Algebra" } },
            { 2, new List<string> { "Calculus II", "Number Theory" } },
            { 3, new List<string> { "Differential Equations", "Abstract Algebra" } },
            { 4, new List<string> { "Real Analysis", "Complex Analysis" } },
            { 5, new List<string> { "Statistics", "Discrete Mathematics" } }
        }));
    }

    public override void DisplayMenu()
    {
        Console.WriteLine("\n \t|¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|");
        Console.WriteLine("\t|WELCOME TO OUR SCHOOL PORTAL!|");
        Console.WriteLine("\t|_____________________________|");
        Console.WriteLine("\n \t1. Create Account");
        Console.WriteLine("\n \t2. Log In");
        Console.WriteLine("\n \t3. Exit");
        Console.Write("\n \tEnter an option (1-3): ");
    }

    public override void Start()
    {
        bool isRunning = true;
        while (isRunning)
        {
            DisplayMenu();
            int choice = int.Parse(Console.ReadLine());

            switch (choice)
            {
            case 1:
                    CreateAccount();
                    break;
            case 2:
                    LogIn();
                    break;
            case 3:
                    isRunning = false;
                    Console.WriteLine("Exiting program.");
                    break;
            default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    private void CreateAccount()
    {
        Console.Write("\tEnter your name: ");
        string name = Console.ReadLine();
        string studentID = GenerateRandomStudentID();

        Console.WriteLine("\n \t Available Courses:");
        for (int i = 0; i < courses.Count; i++)
        {
            Console.WriteLine(i + 1 + ". " + courses[i].Name + " - Cost per semester: PHP" + courses[i].CostPerSemester);
        }

        Console.Write("\tSelect a course (Enter the course number): ");
        int courseChoice = int.Parse(Console.ReadLine()) - 1;

        if (courseChoice >= 0 && courseChoice < courses.Count)
        {
            Student student = new Student(name, studentID, courses[courseChoice]);
            students.Add(student);
            Console.WriteLine("\n \tAccount created successfully!\n");
            Console.WriteLine("\tYour Student ID is: " + studentID);
        }
        else
        {
            Console.WriteLine("\tInvalid course choice. Please create an account again.");
        }
    }

    private void LogIn()
    {
        Console.Write("\tEnter your student ID: ");
        string studentID = Console.ReadLine();
        Student student = students.Find(s => s.StudentID == studentID);
        if (student != null)
        {
            Console.WriteLine("\tWelcome, " + student.Name + "!");
            Console.WriteLine("\tCourse: " + student.Course.Name);
            Console.WriteLine("\tCost per semester: $" + student.Course.CostPerSemester);
            Console.WriteLine("\tSubjects by Year:");
            foreach (var entry in student.Course.Subjects)
            {
                Console.WriteLine("\tYear " + entry.Key + ": " + string.Join(", ", entry.Value));
            }
        }
        else
        {
            Console.WriteLine("\tStudent not found. Please create an account or try again.");
        }
    }
    private string GenerateRandomStudentID()
    {
        Random rand = new Random();
        int randomNumber = rand.Next(1000, 9999);
        return "22-" + randomNumber.ToString();
    }
}

abstract class User
{
    public string Name { get; set; }
    public abstract string GetRole();
}

class Student : User
{
    public string StudentID { get; set; }
    public Course Course { get; set; }

    public Student(string name, string studentID, Course course)
    {
        Name = name;
        StudentID = studentID;
        Course = course;
    }

    public override string GetRole()
    {
        return "Student";
    }
}

class Course
{
    public string Name { get; set; }
    public decimal CostPerSemester { get; set; }
    public Dictionary<int, List<string>> Subjects { get; set; }

    public Course(string name, decimal costPerSemester, Dictionary<int, List<string>> subjects)
    {
        Name = name;
        CostPerSemester = costPerSemester;
        Subjects = subjects;
    }
}

class Program
{
    static void Main(string[] args)
    {
        EnrollmentProgram enrollmentProgram = new StudentEnrollment();
        enrollmentProgram.Start();
    }
}
